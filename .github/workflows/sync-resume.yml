# .github/workflows/sync-resume.yml
name: Sync Resume from Google Drive

on:
  schedule:
    # Run every day at 9 AM UTC
    # - cron: '0 9 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  sync-resume:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2
        sudo apt update
        sudo apt install gh -y

    - name: Create sync script
      run: |
        cat > sync_resume.py << 'EOF'
        import os
        import json
        import hashlib
        from google.oauth2 import service_account
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaIoBaseDownload
        import io

        def get_file_hash(file_path):
            """Get SHA256 hash of a file"""
            if not os.path.exists(file_path):
                return None
            with open(file_path, 'rb') as f:
                return hashlib.sha256(f.read()).hexdigest()

        def main():
            # Set up credentials from GitHub secrets
            creds_json = os.environ['GOOGLE_CREDENTIALS']
            folder_id = os.environ['GOOGLE_DRIVE_FOLDER_ID']
            
            # Parse credentials
            creds_info = json.loads(creds_json)
            credentials = service_account.Credentials.from_service_account_info(
                creds_info, scopes=['https://www.googleapis.com/auth/drive.readonly']
            )
            
            # Build Drive API service
            service = build('drive', 'v3', credentials=credentials)
            
            # Search for perocho_resume.pdf in the specified folder
            query = f"name='perocho_resume.pdf' and parents in '{folder_id}' and trashed=false"
            results = service.files().list(q=query, fields="files(id,name,modifiedTime)").execute()
            files = results.get('files', [])
            
            if not files:
                print("No file named 'perocho_resume.pdf' found in the specified folder")
                return False
                
            file_info = files[0]  # Get the first (should be only) match
            file_id = file_info['id']
            modified_time = file_info['modifiedTime']
            
            print(f"Found resume: {file_info['name']} (modified: {modified_time})")
            
            # Download the file
            request = service.files().get_media(fileId=file_id)
            file_content = io.BytesIO()
            downloader = MediaIoBaseDownload(file_content, request)
            
            done = False
            while done is False:
                status, done = downloader.next_chunk()
                
            # Save to local directory
            local_path = 'src/assets/documents/perocho_resume.pdf'  # Adjust path as needed
            os.makedirs(os.path.dirname(local_path), exist_ok=True)
            
            # Get hash of current file (if exists)
            old_hash = get_file_hash(local_path)
            
            # Write new file
            with open(local_path, 'wb') as f:
                f.write(file_content.getvalue())
                
            # Get hash of new file
            new_hash = get_file_hash(local_path)
            
            # Check if file changed
            if old_hash != new_hash:
                print("Resume updated! New version downloaded.")
                return True
            else:
                print("Resume unchanged.")
                return False

        if __name__ == '__main__':
            file_changed = main()
            # Set output for next step
            with open('file_changed.txt', 'w') as f:
                f.write('true' if file_changed else 'false')
        EOF

    - name: Run sync script
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      run: python sync_resume.py

    - name: Check if file changed
      id: check_changes
      run: |
        if [ -f file_changed.txt ]; then
          FILE_CHANGED=$(cat file_changed.txt)
          echo "file_changed=$FILE_CHANGED" >> $GITHUB_OUTPUT
        else
          echo "file_changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.check_changes.outputs.file_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add src/assets/documents/perocho_resume.pdf
        git commit -m "ðŸ”„ Auto-update resume from Google Drive" || exit 0
        git push

    - name: Trigger Build and Deploy Workflow
      if: steps.check_changes.outputs.file_changed == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh workflow run "Build and Deploy" --ref main

    # - name: Create release (optional)
    #   if: steps.check_changes.outputs.file_changed == 'true'
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: resume-update-${{ github.run_number }}
    #     release_name: Resume Update ${{ github.run_number }}
    #     body: |
    #       ðŸ”„ Resume automatically updated from Google Drive
          
    #       Updated on: ${{ github.event.head_commit.timestamp }}
    #     draft: false
    #     prerelease: false